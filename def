    [Id]                     INT            IDENTITY (1, 1) NOT NULL,
    [UserName]               NCHAR (16)     NOT NULL,
    [CompanyId]              INT            NOT NULL,
    [AvailableDays]          INT            NOT NULL,
    [IsActive]               BIT            NOT NULL,
    [UserCreation]           NVARCHAR (6)   NOT NULL,
    [UserModification]       NVARCHAR (6)   NULL,
    [DateCreation]           DATETIME       NOT NULL,
    [DateModification]       DATETIME       NULL,
    [DateLastPasswordChange] DATETIME       NULL,
    [State]                  NCHAR (1)      NULL,
    [Email]                  NVARCHAR (250) NULL,
    [EmailConfirmed]         BIT            NOT NULL,
    [PasswordHash]           NVARCHAR (MAX) NULL,
    [SecurityStamp]          NVARCHAR (MAX) NULL,
    [PhoneNumber]            NVARCHAR (250) NULL,
    [PhoneNumberConfirmed]   BIT            NOT NULL,
    [TwoFactorEnabled]       BIT            NOT NULL,
    [LockoutEndDateUtc]      DATETIME       NULL,
    [LockoutEnabled]         BIT            NOT NULL,
    [AccessFailedCount]      INT            NOT NULL,
    CONSTRAINT [PK_cw.Users] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [FK_cw.Users_cw.Companies_CompanyId] FOREIGN KEY ([CompanyId]) REFERENCES [cw].[Companies] ([Id])
CREATE PROCEDURE [cw].[GetUserByUserNameAndPassword]
    @UserName NCHAR(16),
    @PasswordHash NVARCHAR(MAX)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM [cw].[Users]
    WHERE [UserName] = @UserName
        AND [PasswordHash] = @PasswordHash;
END;


 public async Task<RespUserAuth> GetRespAuth()
        {
            var listUserAppMov = await Task.Run(() =>
            {
                return Context.SetData<RespUserAuth>("cw.GetUserByUserNameAndPassword @UserName",
                    new SqlParameter[]{
                            new SqlParameter("@UserName", "")
                    }).ToList();
            });
            foreach (var item in listUserAppMov)
            {/*
                economicId = item.EconomicGroupId;
                idcUserDet = item.UserDetailIdc;*/
            }
            return listUserAppMov;
        }
using System.Data.SqlClient;

public class UserRepository
{
    private string connectionString = "tu_cadena_de_conexión";

    public User GetUserByUserNameAndPassword(string userName, string passwordHash)
    {
        User user = null;

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string query = "SELECT * FROM [cw].[Users] WHERE [UserName] = @UserName AND [PasswordHash] = @PasswordHash";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserName", userName);
                command.Parameters.AddWithValue("@PasswordHash", passwordHash);

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        user = new User
                        {
                            Id = (int)reader["Id"],
                            UserName = (string)reader["UserName"],
                            PasswordHash = (string)reader["PasswordHash"]
                            // Agrega aquí cualquier otro campo que necesites
                        };
                    }
                }
            }
        }

        return user;
    }
}
using Dapper;
using System.Data.SqlClient;

public class UserRepository
{
    private string connectionString = "tu_cadena_de_conexión";

    public User GetUserByUserNameAndPassword(string userName, string passwordHash)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            var parameters = new { UserName = userName, PasswordHash = passwordHash };

            string query = "cw.GetUserByUserNameAndPassword";

            User user = connection.QueryFirstOrDefault<User>(query, parameters, commandType: System.Data.CommandType.StoredProcedure);

            return user;
        }
    }
}


[cw].[Companies] (
    [Id]                 INT             IDENTITY (1, 1) NOT NULL,
    [Name]               NVARCHAR (4000) NOT NULL,
    [Idc]                NVARCHAR (12)   NOT NULL,
    [TypeIdc]            NCHAR (1)       NOT NULL,
    [ExtensionIdc]       NCHAR (3)       NULL,
    [ComplementIdc]      NCHAR (10)      NULL,
    [DailyLimit]         DECIMAL (18, 2) NOT NULL,
    [DebitOrder]         BIT             NOT NULL,
    [AuthorizePin]       BIT             NOT NULL,
    [AuthorizeFtp]       BIT             NOT NULL,
    [IsSignature]        BIT             NOT NULL,
    [EconomicGroupId]    INT             NOT NULL,
    [UserCreation]       NVARCHAR (6)    NOT NULL,
    [UserModification]   NVARCHAR (6)    NULL,
    [DateCreation]       DATETIME        NOT NULL,
    [DateModification]   DATETIME        NULL,
    [IsDeleted]          BIT             NOT NULL,
    [AuthorizeOperation] BIT             DEFAULT ((0)) NOT NULL,
    [Telephone]          VARCHAR (10)    DEFAULT ('') NULL,
    [IsValidBatchToken]  BIT             DEFAULT ((0)) NOT NULL,
    [AuthorizeApi]       BIT             CONSTRAINT [DF_Companies_AuthorizeApi] DEFAULT ((1)) NOT NULL,
