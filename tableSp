milono[cw].[DelayAuthorizedBatches] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [ProcessBatchId]    INT           NOT NULL,
    [UserId]            INT           NOT NULL,
    [OperationStatusId] INT           NOT NULL,
    [Detail]            NVARCHAR (50) NOT NULL,
    [DateCreation]      DATETIME      NOT NULL,
    [DateModification]  DATETIME      NULL,
    [SignerType]        INT           NOT NULL,
    [IsSend]            BIT           NOT NULL,
    CONSTRAINT [PK_cw.DelayAuthorizedBatches] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [FK_cw.DelayAuthorizedBatches_cw.OperationStatus_OperationStatusId] FOREIGN KEY ([OperationStatusId]) REFERENCES [cw].[OperationStatus] ([Id]),
    CONSTRAINT [FK_cw.DelayAuthorizedBatches_cw.ProcessBatches_ProcessBatchId] FOREIGN KEY ([ProcessBatchId]) REFERENCES [cw].[ProcessBatches] ([Id]),
    CONSTRAINT [FK_cw.DelayAuthorizedBatches_cw.Users_UserId] FOREIGN KEY ([UserId]) REFERENCES [cw].[Users] ([Id])


CREATE PROCEDURE [cw].[InsertDelayAuthorizedBatch]
(
    @ProcessBatchId INT,
    @UserId INT,
    @OperationStatusId INT,
    @Detail NVARCHAR(50),
    @DateCreation DATETIME,
    @DateModification DATETIME = NULL,
    @SignerType INT,
    @IsSend BIT
)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO [cw].[DelayAuthorizedBatches] (ProcessBatchId, UserId, OperationStatusId, Detail, DateCreation, DateModification, SignerType, IsSend)
    SELECT @ProcessBatchId, @UserId, @OperationStatusId, @Detail, @DateCreation, @DateModification, @SignerType, @IsSend
    WHERE NOT EXISTS (SELECT 1 FROM [cw].[DelayAuthorizedBatches] WHERE ProcessBatchId = @ProcessBatchId);
END


CREATE PROCEDURE [cw].[UpdateDelayAuthorizedBatch]
(
    @ProcessBatchId INT,
    @IsSend BIT,
    @OperationStatusId INT
)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE [cw].[DelayAuthorizedBatches]
    SET IsSend = @IsSend,
        OperationStatusId = @OperationStatusId
    WHERE ProcessBatchId = @ProcessBatchId;
END


{“companyId”:115631,“usser”:“9000010018018018”,“password”:“LocalPayment2023”,“documentNumber”:“1080000”,“documentType”:“Q”,“documentExtension”:“SN”,“documentComplement”:“”,“amount”:1.5,“currency”:“BOL”,“fundSource”:“PayOut LP”,“fundDestination”:“PayOut LP”,“sourceAccount”:“7015095588321",“sourceCurrency”:“BOL”,“description”:“”,“sendVouchers”:“”,“cismartApprovers”:[{“idc”:“6321676-Q-SN”,“type”:1}],“spreadsheet”:{“FormOddPayments”:[],“FormAchPayments”:[{“PaymentType”:“ACH”,“Line”:1,“AccountNumber”:“3554150",“GlossPayment”:“Pago”,“Amount”:1.5,“DocumentType”:“NIT”,“DocumentNumber”:“419326025”,“DocumentExtension”:“”,“FirstDetail”:“”,“SecondDetail”:“”,“TitularName”:“LOCALPAYMENT SRL”,“FirstLastName”:“”,“SecondLastName”:” “,”Mail”:null,“BranchOfficeId”:“201",“BankId”:“046",“Commission”:0.0,“CommissionCurrency”:“”}],“FormProvidersPayments”:[]}}


USE [BD_CREDINET]
GO

/****** Object:  StoredProcedure [cw].[SpUpdateDelayAuthorizedBatch]    Script Date: 7/13/2023 5:08:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateAuthorizedBatch]
(
    @ProcessBatchId INT,
	@OperationStatusId INT
)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [cw].[AuthorizedBatches]
    SET OperationStatusId = @OperationStatusId
    WHERE ProcessBatchId = @ProcessBatchId;
	select @@ROWCOUNT
END
GO

USE [BD_CREDINET]
GO

/****** Object:  StoredProcedure [cw].[SpUpdateDelayAuthorizedBatch]    Script Date: 7/13/2023 5:08:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateProcessBatch]
(
    @ProcessBatchId INT,
	@OperationStatusId INT
)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [cw].[ProcessBatches]
    SET OperationStatusId = @OperationStatusId
    WHERE ProcessBatchId = @ProcessBatchId;
	select @@ROWCOUNT
END
GO

USE [BD_CREDINET]
GO

/****** Object:  StoredProcedure [cw].[SpUpdateDelayAuthorizedBatch]    Script Date: 7/13/2023 5:08:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateProcessBatch]
(
    @ProcessBatchId INT,
	@OperationStatusId INT
)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE [cw].[ProcessBatches]
    SET OperationStatusId = @OperationStatusId
    WHERE ProcessBatchId = @ProcessBatchId;
	select @@ROWCOUNT
END
GO
USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpUpdateBatches] ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateBatches]
(
    @ProcessBatchId INT,
    @OperationStatusId INT
)
AS
BEGIN
    SET NOCOUNT ON;

    -- Actualizar AuthorizedBatches
    IF EXISTS (SELECT 1 FROM [cw].[AuthorizedBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[AuthorizedBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END

    -- Actualizar DelayAuthorizedBatches
    IF EXISTS (SELECT 1 FROM [cw].[DelayAuthorizedBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[DelayAuthorizedBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END

    -- Actualizar ProcessBatches
    IF EXISTS (SELECT 1 FROM [cw].[ProcessBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[ProcessBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END
END
GO

USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpUpdateBatches] ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateDelayBatches]
(
    @ProcessBatchId INT,
	@IsSend BIT, 
	@OperationStatusId INT,
	@DateModification DateTime
)
AS
BEGIN
    SET NOCOUNT ON;
	 -- Actualizar DelayAuthorizedBatches
    IF EXISTS (SELECT 1 FROM [cw].[DelayAuthorizedBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[DelayAuthorizedBatches]
        SET IsSend = @IsSend, 
		DateModification = @DateModification
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END
    -- Actualizar AuthorizedBatches
    IF EXISTS (SELECT 1 FROM [cw].[AuthorizedBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[AuthorizedBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END
    -- Actualizar ProcessBatches
    IF EXISTS (SELECT * FROM [cw].[ProcessBatches] WHERE ProcessBatchId = @ProcessBatchId)
    BEGIN
        UPDATE [cw].[ProcessBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;
        SELECT @@ROWCOUNT;
    END
END
GO
USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpUpdateBatches] ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateBatches]
(
    @ProcessBatchId INT,
    @IsSend BIT,
    @OperationStatusId INT,
    @DateModification DATETIME
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION;

    BEGIN TRY
        -- Actualizar DelayAuthorizedBatches
        UPDATE [cw].[DelayAuthorizedBatches]
        SET IsSend = @IsSend,
            DateModification = @DateModification
        WHERE ProcessBatchId = @ProcessBatchId;

        -- Actualizar AuthorizedBatches
        UPDATE [cw].[AuthorizedBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;

        -- Actualizar ProcessBatches
        UPDATE [cw].[ProcessBatches]
        SET OperationStatusId = @OperationStatusId
        WHERE ProcessBatchId = @ProcessBatchId;

        COMMIT;
        SELECT 'Actualizaciones exitosas.' AS Resultado;
    END TRY
    BEGIN CATCH
        ROLLBACK;
        SELECT 'Error en las actualizaciones. Se ha realizado un rollback.' AS Resultado;
    END CATCH;
END
GO


USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpUpdateBatches] ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpUpdateBatches]
(
    @ProcessBatchId INT,
    @IsSend BIT,
    @OperationStatusId INT,
    @DateModification DATETIME
)
AS
BEGIN
    SET NOCOUNT ON;

    -- Minimizar operaciones de E/S
    DECLARE @UpdateAuthorizedBatches TABLE (RowCount INT);
    DECLARE @UpdateDelayAuthorizedBatches TABLE (RowCount INT);
    DECLARE @UpdateProcessBatches TABLE (RowCount INT);

    -- Actualizar AuthorizedBatches
    UPDATE [cw].[AuthorizedBatches]
    SET OperationStatusId = @OperationStatusId
    OUTPUT @@ROWCOUNT INTO @UpdateAuthorizedBatches
    WHERE ProcessBatchId = @ProcessBatchId;

    -- Actualizar DelayAuthorizedBatches
    UPDATE [cw].[DelayAuthorizedBatches]
    SET IsSend = @IsSend,
        DateModification = @DateModification
    OUTPUT @@ROWCOUNT INTO @UpdateDelayAuthorizedBatches
    WHERE ProcessBatchId = @ProcessBatchId;

    -- Actualizar ProcessBatches
    UPDATE [cw].[ProcessBatches]
    SET OperationStatusId = @OperationStatusId
    OUTPUT @@ROWCOUNT INTO @UpdateProcessBatches
    WHERE ProcessBatchId = @ProcessBatchId;

    -- Verificar el número total de filas actualizadas
    DECLARE @TotalRowsUpdated INT;
    SELECT @TotalRowsUpdated = (SELECT SUM(RowCount) FROM @UpdateAuthorizedBatches) + (SELECT SUM(RowCount) FROM @UpdateDelayAuthorizedBatches) + (SELECT SUM(RowCount) FROM @UpdateProcessBatches);

    -- Verificar si se realizaron actualizaciones
    IF @TotalRowsUpdated > 0
    BEGIN
        SELECT 'Actualizaciones exitosas. Total de filas actualizadas: ' + CAST(@TotalRowsUpdated AS NVARCHAR(MAX)) AS Resultado;
    END
    ELSE
    BEGIN
        SELECT 'No se encontraron registros para actualizar.' AS Resultado;
    END
END
GO
