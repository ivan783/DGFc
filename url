https://devcwn01:444/APIAuthorization/api/APIAuthorization/ProcessBatches
string url = "https://devcwn01:444/APIAuthorization/api/APIAuthorization/ProcessBatches";
string palabraValidar = "APIAuthorization";

if (url.Contains(palabraValidar))
{
    Console.WriteLine("La palabra está presente en la URL.");
}
else
{
    Console.WriteLine("La palabra no está presente en la URL.");
}


https://teams.microsoft.com/l/meetup-join/19:meeting_YjRiZGI5YzUtOWY5Yy00NWNkLTgwZmYtZDc1ZTdmY2EwMGE1@thread.v2/0?context=%7B%22Tid%22:%225d93ebcc-f769-4380-8b7e-289fc972da1b%22,%22Oid%22:%220529f12d-8235-4745-ace6-d30af315cfc4%22%7D

public class Result<BODY>
    {
        public bool IsOk { get; }
        public string Message { get; }
        public BODY Body { get; }

        public static Result<BODY> SetError(string message);
        public static Result<BODY> SetOk(BODY body);
    }
public class Result<BODY>
{
    public bool IsOk { get; private set; }
    public string Message { get; private set; }
    public BODY Body { get; private set; }
    public int Status { get; private set; }

    private Result(bool isOk, string message, BODY body, int status)
    {
        IsOk = isOk;
        Message = message;
        Body = body;
        Status = status;
    }

    public static Result<BODY> SetError(string message, int status)
    {
        return new Result<BODY>(false, message, default(BODY), status);
    }

    public static Result<BODY> SetOk(BODY body, int status)
    {
        return new Result<BODY>(true, string.Empty, body, status);
    }

    // Agrega tus propiedades y métodos personalizados aquí

    public override string ToString()
    {
        return $"IsOk: {IsOk}, Message: {Message}, Body: {Body}, Status: {Status}";
    }
}

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0738	'AuthAppMovilBusiness' does not implement interface member 'IAuthAppMovilBusiness.GetAuthenticate(DeviceDto, string, string)'. 'AuthAppMovilBusiness.GetAuthenticate(DeviceDto, string, string)' cannot implement 'IAuthAppMovilBusiness.GetAuthenticate(DeviceDto, string, string)' because it does not have the matching return type of 'Result<AuthResult>'.	AuthAppMovil.Business	D:\Services_2023\CW_AUTH_APP_WES\Funtions\AuthAppMovil.Business\AuthAppMovilBusiness.cs	20	Active

namespace BCP.CredinetWeb.Core.Business
{
    public class Result<BODY>
    {
        public bool IsOk { get; }
        public string Message { get; }
        public BODY Body { get; }

        public static Result<BODY> SetError(string message);
        public static Result<BODY> SetOk(BODY body);
    }
}
using BCP.CredinetWeb.Core.Business; // Importa el espacio de nombres de la DLL

public class CustomResult<BODY> : Result<BODY>
{
    public int CustomStatus { get; private set; }
    public string CustomMessage { get; private set; }

    public CustomResult(bool isOk, string message, BODY body, int status, int customStatus, string customMessage)
        : base(isOk, message, body)
    {
        CustomStatus = customStatus;
        CustomMessage = customMessage;
        Status = status; // Mantenemos el estado original de Result<BODY>
    }
}

namespace BCP.AuthAppMovil.Functions.AuthAppMovil.Business
{
    public class AuthAppMovilBusiness : BaseBusiness<ProcessBatch, AuthAppMovilContext>, IAuthAppMovilBusiness
    {
        ILogger<AuthAppMovilBusiness> logger;
        string segCryptName;

        public AuthAppMovilBusiness(AuthAppMovilContext context, IPrincipal userInfo, ILogger<AuthAppMovilBusiness> logger, IConfiguration configuration) : base(context, userInfo, configuration)
        {
            this.logger = logger;
            if (string.IsNullOrEmpty(segCryptName))
            {
                segCryptName = configuration["SegCryptCW"];
            }
            LoaderSecrypt.LoadSegCrypt(segCryptName);
        }

        public Result<AuthResult> GetAuthenticate(DeviceDto dto, string username,string password)
        {
            AuthResult response = new AuthResult();
            var urlAuth = configuration.GetSection("Connectors")["AddressJwt"];
            HttpClientHandler httpClientHandler = new HttpClientHandler();
            var valueRender = configuration.GetSection("Render").Value;
            var decUsername = LoaderSecrypt.EncryptDecrypt(false, username);
            var decPassword = LoaderSecrypt.EncryptDecrypt(false, password);
            var jsonRequest = JsonConvert.SerializeObject(dto);
            logger.LogError($"Request Header user: {username}, pass: {password}");
            logger.LogError($"Request Body: {jsonRequest}");
            using (var httpClient = new HttpClient(httpClientHandler))
            {
                try
                {
                    HttpContent contentU = new FormUrlEncodedContent(
                    new List<KeyValuePair<string, string>> {
                        new KeyValuePair<string, string>("username", decUsername.ToString()),
                        new KeyValuePair<string,string>("password",decPassword.ToString()),
                        new KeyValuePair<string,string>("grant_type",System.Net.WebUtility.UrlEncode("password")),
                        new KeyValuePair<string,string>("client_id",valueRender) }
                    );

                    contentU.Headers.ContentType = new MediaTypeHeaderValue("application/x-www-form-urlencoded");
                    contentU.Headers.ContentType.CharSet = "UTF-8";
                    var responseToken = httpClient.PostAsync(new Uri(urlAuth), contentU).Result;
                    var resultContentToken = responseToken.Content.ReadAsStringAsync().Result;
                    logger.LogError($"Response JWT: {resultContentToken}");
                    var result = JsonConvert.DeserializeObject<AuthResult>(resultContentToken);
                    logger.LogError($"Error de auth: {result?.error_description}");
                    if (!string.IsNullOrEmpty(result.access_token))
                    {
                        /*response.status = "00";
                        response.message = "Sesión correcta.";
                        response.data = result;*/

                        response = result;

                        var userList = Context.SqlQuery<SpNewSessionApp>("cw.SpGetNewSessionApps @Idc,@CardNumber,@IdDivece",
                        new SqlParameter[]{
                            new SqlParameter("@Idc", "4dvdsvxv"),
                            new SqlParameter("@CardNumber", "4xcvxcv"),
                            new SqlParameter("@IdDivece", "4xcvx")
                        }).ToList();
                    }
                   
                }
                catch (Exception e)
                {
                    //logger.LogError($"Error en el servicio de autenticación: {e.ToString()}");
                    //response.status = "99";
                    //response.message = "Se produjo una excepción no controlada.";
                    return Result<AuthResult>.SetOk(response);
                }
            }
            return Result<AuthResult>.SetOk(response);
        }

    }
}
using BCP.CredinetWeb.Core.Business; // Importa el espacio de nombres de la DLL
using System;

namespace BCP.AuthAppMovil.Functions.AuthAppMovil.Business
{
    public class CustomResult<RESULT> : Result<RESULT>
    {
        public int CustomStatus { get; private set; }
        public string CustomMessage { get; private set; }

        public CustomResult(bool isOk, string message, RESULT body, int status, int customStatus, string customMessage)
            : base(isOk, message, body)
        {
            CustomStatus = customStatus;
            CustomMessage = customMessage;
            Status = status; // Mantenemos el estado original de Result<RESULT>
        }
    }

    public class AuthAppMovilBusiness : BaseBusiness<ProcessBatch, AuthAppMovilContext>, IAuthAppMovilBusiness
    {
        // Resto del código de tu clase AuthAppMovilBusiness...

        public CustomResult<AuthResult> GetAuthenticate(DeviceDto dto, string username, string password)
        {
            // Resto de tu código...
            
            CustomResult<AuthResult> result = new CustomResult<AuthResult>(true, "Success", response, 200, customStatus, customMessage);

            return result;
        }

        // Resto del código de tu clase AuthAppMovilBusiness...
    }
}
