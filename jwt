{
   "nameid":"10221",
   "unique_name":"9000010000130765",
   "http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider":"ASP.NET Identity",
   "AspNet.Identity.SecurityStamp":"50934129-6af1-45aa-9bdb-f0b312a0712c",
   "role":[
      "AUTORIZADOR",
      "CONSULTOR",
      "CONTROLADOR",
      "INICIADOR"
   ],
   "company_id":"2295",
   "company_state":true,
   "company_name":"SILLERICO NEGANEZ RODOLFO ANDRES",
   "controller_scheme":false,
   "user_type":"P",
   "user_name":"REMBERTO HILAQUITA MAMANI",
   "user_document_number":"4850147",
   "user_document_extension":"LP ",
   "user_document_type":"Q",
   "exchange_buy":"6.85",
   "exchange_sale":"6.97",
   "is_signature":true,
   "authorize_operation":false,
   "authorize_pin":false,
   "authorize_ftp":true,
   "is_validbatchtoken":false,
   "guid":"fa7225d2-4232-4056-9d9c-284b47b0d6aa",
   "iss":"http://localhost:53793",
   "aud":"f82e450ad49e4284a613ed9a4a5deb74",
   "exp":1683214841,
   "nbf":1683213041
}
https://github.com/gavilanch/CursoRESTfulAPIsASPNETCore

select UD.Id, UD.Name as UserName, CM.Name as CompanyName, CM.Idc as IdcCompany, CM.TypeIdc as TypeIdcComp, UD.Idc as UserDetalleIdc,
 UD.IdcType as TypeIdcUserDet, EG.Name as EconomiName, US.UserName, US.PasswordHash, US.SecurityStamp, EG.Id from cw.Companies CM 
INNER JOIN cw.Users US on CM.Id=US.CompanyId
inner join cw.EconomicGroups EG on EG.Id=CM.EconomicGroupId
inner join cw.UserDetails UD on UD.Id=US.Id
where UD.Idc='4850147' and EG.Id=2260



CREATE PROCEDURE GetUserData
    @UDId INT,
    @EGId INT
AS
BEGIN
    SELECT UD.Id, UD.Name AS UserName, CM.Name AS CompanyName, CM.Idc AS IdcCompany, CM.TypeIdc AS TypeIdcComp, UD.Idc AS UserDetalleIdc,
        UD.IdcType AS TypeIdcUserDet, EG.Name AS EconomiName, US.UserName, US.PasswordHash, US.SecurityStamp, EG.Id
    FROM cw.Companies CM
    INNER JOIN cw.Users US ON CM.Id = US.CompanyId
    INNER JOIN cw.EconomicGroups EG ON EG.Id = CM.EconomicGroupId
    INNER JOIN cw.UserDetails UD ON UD.Id = US.Id
    WHERE UD.Idc = @UDId AND EG.Id = @EGId
END



CREATE PROCEDURE GetUserData
    @UDId INT,
    @EGId INT
AS
BEGIN
    SELECT UD.Id, UD.Name AS UserName, CM.Name AS CompanyName, CM.Idc AS IdcCompany, CM.TypeIdc AS TypeIdcComp, UD.Idc AS UserDetalleIdc,
        UD.IdcType AS TypeIdcUserDet, EG.Name AS EconomiName, US.UserName, US.PasswordHash, US.SecurityStamp, EG.Id
    FROM cw.UserDetails UD
    INNER JOIN cw.Users US ON UD.Id = US.Id
    INNER JOIN cw.Companies CM ON US.CompanyId = CM.Id
    INNER JOIN cw.EconomicGroups EG ON CM.EconomicGroupId = EG.Id
    WHERE UD.Idc = @UDId AND EG.Id = @EGId
END

public async Task<Result<List<GetResponseCompanyApp>>> GetRespCompaniesApp()
       
        {
            List<GetResponseCompanyApp> response = new List<GetResponseCompanyApp>();
             try
            {
                int compId = companyId;
                var listUserComp = Context.SqlQuery<GetUserCompanyApp>("cw.SpGetUserCompanyApp @UDId,@EGId",
                    new SqlParameter[]{
                        //new SqlParameter("@UDId", compId),
                        new SqlParameter("@UDId", "4850147"),//null ?? (object)DBNull.Value),
                        new SqlParameter("@EGId", 2260) //null ?? (object)DBNull.Value),
                        //new SqlParameter("@QrCompanyId", null ?? (object)DBNull.Value),
                    }).ToList();

                foreach (var item in listUserComp)
                {
                    
                        var resul = new GetResponseCompanyApp();
                        resul.Id = item.Id;
                        resul.IdcCompany = item.IdcCompany;
                        resul.PasswordHash = item.PasswordHash;
                        resul.SecurityStamp = item.SecurityStamp;
                        response.Add(resul);

                }

                var aux = JsonConvert.SerializeObject(response);
                logger.LogError($"List Compani: {aux}");

                return Result<List<GetResponseCompanyApp>>.SetOk(response);
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al obtener Lista: {ex.Message}");
                return Result<List<GetResponseCompanyApp>>.SetError("Error al obtener Lista");
            }
        }


public async Task<Result<List<GetResponseCompanyApp>>> GetRespCompaniesApp()
{
    List<GetResponseCompanyApp> response = new List<GetResponseCompanyApp>();
    try
    {
        int compId = companyId;
        var listUserComp = await Task.Run(() =>
        {
            return Context.SqlQuery<GetUserCompanyApp>("cw.SpGetUserCompanyApp @UDId,@EGId",
                new SqlParameter[]{
                    new SqlParameter("@UDId", "4850147"),
                    new SqlParameter("@EGId", 2260)
                }).ToList();
        });

        foreach (var item in listUserComp)
        {
            var resul = new GetResponseCompanyApp();
            resul.Id = item.Id;
            resul.IdcCompany = item.IdcCompany;
            resul.PasswordHash = item.PasswordHash;
            resul.SecurityStamp = item.SecurityStamp;
            response.Add(resul);
        }

        var aux = JsonConvert.SerializeObject(response);
        logger.LogError($"List Compani: {aux}");

        return Result<List<GetResponseCompanyApp>>.SetOk(response);
    }
    catch (Exception ex)
    {
        logger.LogError($"Error al obtener Lista: {ex.Message}");
        return Result<List<GetResponseCompanyApp>>.SetError("Error al obtener Lista");
    }
}
private bool IsRefreshTokenValid(string refreshToken)
{
    if (string.IsNullOrEmpty(refreshToken))
    {
        return false;
    }

    var refreshTokenExpiration = GetRefreshTokenExpiration(refreshToken);
    var currentTime = DateTime.UtcNow;
    var lastActivityTime = GetLastActivityTime();

    if ((currentTime - lastActivityTime).TotalMinutes > 3)
    {
        // Si ha pasado más de 3 minutos de inactividad, el token ya no es válido
        return false;
    }

    return refreshTokenExpiration > currentTime;
}

private DateTime GetRefreshTokenExpiration(string refreshToken)
{
    var handler = new JwtSecurityTokenHandler();
    var refreshTokenToken = handler.ReadToken(refreshToken) as JwtSecurityToken;
    var refreshTokenExpiration = refreshTokenToken.ValidTo;

    return refreshTokenExpiration;
}

private DateTime GetLastActivityTime()
{
    var lastActivityTime = Session["LastActivityTime"] as DateTime?;

    if (!lastActivityTime.HasValue)
    {
        lastActivityTime = DateTime.UtcNow;
        Session["LastActivityTime"] = lastActivityTime;
    }

    return lastActivityTime.Value;
}

private void UpdateLastActivityTime()
{
    Session["LastActivityTime"] = DateTime.UtcNow;
}

private void RenewTokenIfOnline()
{
    var refreshToken = GetRefreshTokenFromSession();

    if (!IsRefreshTokenValid(refreshToken))
    {
        RedirectToLogin();
        return;
    }

    var currentTime = DateTime.UtcNow;
    var lastRenewalTime = GetLastRenewalTime();

    if ((currentTime - lastRenewalTime).TotalMinutes > 30)
    {
        var newToken = RenewToken(refreshToken);

        if (!string.IsNullOrEmpty(newToken))
        {
            UpdateTokenInSession(newToken);
            UpdateLastRenewalTime();
        }
    }
}

private DateTime GetLastRenewalTime()
{
    var lastRenewalTime = Session["LastRenewalTime"] as DateTime?;

    if (!lastRenewalTime.HasValue)
    {
        lastRenewalTime = DateTime.UtcNow;
        Session["LastRenewalTime"] = lastRenewalTime;
    }

    return lastRenewalTime.Value;
}

private void UpdateLastRenewalTime()
{
    Session["LastRenewalTime"] = DateTime.UtcNow;
}

