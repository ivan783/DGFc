select * from cw.BranchQRPayments BP 
INNER JOIN cw.BusinessQRPayments BQ on BQ.Id=BP.BusinessQRPaymentId
INNER join cw.QrUserClients QC on QC.CompanyId=BQ.CompanyId
 WHERE BP.BusinessQRPaymentId IN (
        SELECT Id
        FROM cw.BusinessQRPayments 
        WHERE Id = 1
    )

select BR.Id, BR.BranchName, BR.UserBranchQR, CONVERT(CHAR(8), BR.DateCreation, 112) as Fecha, BR.IsDeleted from cw.BranchQRPayments BR inner join 
cw.BusinessQRPayments BU on BU.Id=BR.BusinessQRPaymentId
where CONVERT(CHAR(8), BR.DateCreation, 112)<='20230427'
And BR.UserToken !='SIN TOKEN'
 And BR.BusinessQRPaymentId IN (
        SELECT Id
        FROM cw.BusinessQRPayments 
        WHERE Id = 1
    )


CREATE PROCEDURE obtener_datos
  @Id int
AS
BEGIN
  SET NOCOUNT ON;
  SELECT BR.Id, BR.BranchName, BR.UserBranchQR, CONVERT(CHAR(8), BR.DateCreation, 112) as Fecha, BR.IsDeleted 
  FROM cw.BranchQRPayments BR 
  INNER JOIN cw.BusinessQRPayments BU ON BU.Id = BR.BusinessQRPaymentId
  WHERE CONVERT(CHAR(8), BR.DateCreation, 112) <= '20230427'
  AND BR.UserToken != 'SIN TOKEN'
  AND BR.BusinessQRPaymentId = @Id
END


 public Result<List<BranchQRPaymentResponse>> GetBranchQR(BusinesBranchId businessId)
        {
            List<BranchQRPaymentResponse> response = new List<BranchQRPaymentResponse>();
            //var listBranches = Context.BranchQRPayments.Where(x => x.BusinessQRPaymentId == businessId.businessId).ToList();
            try
            {
                if (businessId.ListBranch =="A")
                {
                    var listBranches = Context.SqlQuery<BranchSp>("cw.SpBranchQRPayments @Id",
                    new SqlParameter[]{
                        new SqlParameter("@Id", businessId.businessId)
                    });

                    foreach (var item in listBranches)
                    {
                        
                            var resul = new BranchQRPaymentResponse();
                            resul.Id = item.Id;
                            resul.BranchName = item.BranchName;
                            resul.Name = item.Name;
                            resul.City = item.City;
                            resul.IsDeleted = item.IsDeleted==false?true:false;
                            response.Add(resul);
                        

                    }

                    var listBranchesV1 = Context.SqlQuery<SpBranchQRV1>("cw.SpBranchQRPayments @Id",
                    new SqlParameter[]{
                        new SqlParameter("@Id", businessId.businessId)
                    });

                    foreach (var item in listBranchesV1)
                    {

                        var resul = new BranchQRPaymentResponse();
                        resul.Id = item.Id;
                        resul.BranchName = item.BranchName;
                        resul.Name = item.UserBranchQR;
                        resul.City = "Aleatorio";
                        resul.IsDeleted = item.IsDeleted == false ? true : false;
                        response.Add(resul);


                    }
                    var aux = JsonConvert.SerializeObject(response);
                    logger.LogError($"Lista BranchQRPpayment: {aux}");
                    return Result<List<BranchQRPaymentResponse>>.SetOk(response);
                }
                else
                {
                    var listBranches = Context.SqlQuery<BranchQRPayment>("cw.SpGetQrData @CompanyId,@BusinessQRPaymentId,@BranchQRPaymentId,@QrCompanyId",
                    new SqlParameter[]{
                        new SqlParameter("@CompanyId", null ?? (object)DBNull.Value),
                        new SqlParameter("@BusinessQRPaymentId", businessId.businessId),
                        new SqlParameter("@BranchQRPaymentId", null ?? (object)DBNull.Value),
                        new SqlParameter("@QrCompanyId", null ?? (object)DBNull.Value),
                    }).ToList();

                    foreach (var item in listBranches)
                    {
                        if (item.IsDeleted == false)
                        {
                            var resul = new BranchQRPaymentResponse();
                            resul.Id = item.Id;
                            resul.BusinessQRPaymentId = item.BusinessQRPaymentId;
                            resul.BranchCode = item.BranchCode;
                            resul.BranchName = item.BranchName;
                            response.Add(resul);
                        }

                    }
                    var aux = JsonConvert.SerializeObject(response);
                    logger.LogError($"BranchQRPpayment: {aux}");
                    return Result<List<BranchQRPaymentResponse>>.SetOk(response);
                }
                
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al obtener BranchQRPayments: {ex.Message}");
                return Result<List<BranchQRPaymentResponse>>.SetError("Error al obtener BranchQRPayments");
            }
        }
        
        
        var combinedList = listBranches.Select(x => new { Id = x.Id, Name = x.Name })
    .Union(listBranchesV1.Select(x => new { Id = x.Id, Name = x.Name }))
    .ToList();



public async Task<Result<GetRegUserQRResponse>> RegUsers(ReqRegUserDto dto)
        {
            try
            {
                GetRegUserQRRequest request = new GetRegUserQRRequest();
                GetRegUserQRResponse response = new GetRegUserQRResponse();
                var appUserId = configuration.GetSection("Connectors").GetSection("ApiQR")["AppUserId"];
                var publicToken = configuration.GetSection("Connectors").GetSection("ApiQR")["PublicToken"];
                var channel = configuration.GetSection("Connectors").GetSection("ApiQR")["Channel"];
                var url = configuration.GetSection("Connectors").GetSection("ApiQR")["AddressRegUsers"];

                request.AppUserId = appUserId;
                request.Channel = channel;
                request.PublicToken = publicToken;
               // request.RoleCode = dto.roleCode;
                request.BusinessCode = dto.businessCode;
                request.TypeUser = "CW";

                var result = Result<GetRegUserQRResponse>.SetOk(responseRes);
                foreach (var addUser in dto.ClientResponseUser)
                {
                    request.Client= new Client();
                    request.Client.Name = addUser.name;
                    request.Client.Password = EncryptDecrypt(true, addUser.password);
                    request.Client.UserName = addUser.userName;
                    request.Client.Email = addUser.email;
                    request.Client.DocumentComplement = addUser.documentComplement=="" ? "00": addUser.documentComplement;
                    request.Client.DocumentExtension = addUser.documentExtension;
                    request.Client.DocumentNumber = addUser.documentNumber;
                    
                    request.RoleCode = addUser.roleCode;
                    request.Client.PasswordExpirationDate = DateTime.Now.ToString();
                    

                    request.Device = new Device();
                    request.Device.Id = "01";
                    request.Device.Type = "PC";
                    request.Device.Name = "PC T";
                    request.Device.Os = "Windows 10";
                    var aux = JsonConvert.SerializeObject(request);
                    logger.LogError($"Request: {aux}");
                    
                    response = await Task.Run(() => this.manager.SaveRegUserQR(request, url));
                    var aux1 = JsonConvert.SerializeObject(response.Message);
                    logger.LogError($"Response Mensage: {aux1}");
                    var aux2 = JsonConvert.SerializeObject(response.State);
                    logger.LogError($"Response Stado: {aux2}");
                    if (response?.State=="00")
                    {
                        logger.LogError($"UserIdQR:-----{response.Data.Client.Id}----");
                        InsertarRegistro(0, companyId, 0, response.Data.Client.Id, request.RoleCode, addUser.typeUser, request.Client.Name,
                        response?.Data?.Client?.UserName, response?.Data?.Client?.Token.ToString(), request.Client.Password, request.Client.Email, request.Client.Cellphone, request.Client.DocumentNumber,
                        request.Client.DocumentType, request.Client.DocumentExtension, request.Client.DocumentComplement, "Migra",
                        "migra", DateTime.Now, DateTime.Now, DateTime.Now, false);
                    }                   
                }
                 return response.State != "00" ? Result<GetRegUserQRResponse>.SetError($"Mensaje de error: {response.Message}") :
                result;
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al registrar Usuario QR excepcion message: {ex.Message}");
                return Result<GetRegUserQRResponse>.SetError("Error al Registrar user");
            }
        }
