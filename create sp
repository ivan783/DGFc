select * from cw.BranchQRPayments BP 
INNER JOIN cw.BusinessQRPayments BQ on BQ.Id=BP.BusinessQRPaymentId
INNER join cw.QrUserClients QC on QC.CompanyId=BQ.CompanyId
 WHERE BP.BusinessQRPaymentId IN (
        SELECT Id
        FROM cw.BusinessQRPayments 
        WHERE Id = 1
    )

select BR.Id, BR.BranchName, BR.UserBranchQR, CONVERT(CHAR(8), BR.DateCreation, 112) as Fecha, BR.IsDeleted from cw.BranchQRPayments BR inner join 
cw.BusinessQRPayments BU on BU.Id=BR.BusinessQRPaymentId
where CONVERT(CHAR(8), BR.DateCreation, 112)<='20230427'
And BR.UserToken !='SIN TOKEN'
 And BR.BusinessQRPaymentId IN (
        SELECT Id
        FROM cw.BusinessQRPayments 
        WHERE Id = 1
    )


CREATE PROCEDURE obtener_datos
  @Id int
AS
BEGIN
  SET NOCOUNT ON;
  SELECT BR.Id, BR.BranchName, BR.UserBranchQR, CONVERT(CHAR(8), BR.DateCreation, 112) as Fecha, BR.IsDeleted 
  FROM cw.BranchQRPayments BR 
  INNER JOIN cw.BusinessQRPayments BU ON BU.Id = BR.BusinessQRPaymentId
  WHERE CONVERT(CHAR(8), BR.DateCreation, 112) <= '20230427'
  AND BR.UserToken != 'SIN TOKEN'
  AND BR.BusinessQRPaymentId = @Id
END


 public Result<List<BranchQRPaymentResponse>> GetBranchQR(BusinesBranchId businessId)
        {
            List<BranchQRPaymentResponse> response = new List<BranchQRPaymentResponse>();
            //var listBranches = Context.BranchQRPayments.Where(x => x.BusinessQRPaymentId == businessId.businessId).ToList();
            try
            {
                if (businessId.ListBranch =="A")
                {
                    var listBranches = Context.SqlQuery<BranchSp>("cw.SpBranchQRPayments @Id",
                    new SqlParameter[]{
                        new SqlParameter("@Id", businessId.businessId)
                    });

                    foreach (var item in listBranches)
                    {
                        
                            var resul = new BranchQRPaymentResponse();
                            resul.Id = item.Id;
                            resul.BranchName = item.BranchName;
                            resul.Name = item.Name;
                            resul.City = item.City;
                            resul.IsDeleted = item.IsDeleted==false?true:false;
                            response.Add(resul);
                        

                    }

                    var listBranchesV1 = Context.SqlQuery<SpBranchQRV1>("cw.SpBranchQRPayments @Id",
                    new SqlParameter[]{
                        new SqlParameter("@Id", businessId.businessId)
                    });

                    foreach (var item in listBranchesV1)
                    {

                        var resul = new BranchQRPaymentResponse();
                        resul.Id = item.Id;
                        resul.BranchName = item.BranchName;
                        resul.Name = item.UserBranchQR;
                        resul.City = "Aleatorio";
                        resul.IsDeleted = item.IsDeleted == false ? true : false;
                        response.Add(resul);


                    }
                    var aux = JsonConvert.SerializeObject(response);
                    logger.LogError($"Lista BranchQRPpayment: {aux}");
                    return Result<List<BranchQRPaymentResponse>>.SetOk(response);
                }
                else
                {
                    var listBranches = Context.SqlQuery<BranchQRPayment>("cw.SpGetQrData @CompanyId,@BusinessQRPaymentId,@BranchQRPaymentId,@QrCompanyId",
                    new SqlParameter[]{
                        new SqlParameter("@CompanyId", null ?? (object)DBNull.Value),
                        new SqlParameter("@BusinessQRPaymentId", businessId.businessId),
                        new SqlParameter("@BranchQRPaymentId", null ?? (object)DBNull.Value),
                        new SqlParameter("@QrCompanyId", null ?? (object)DBNull.Value),
                    }).ToList();

                    foreach (var item in listBranches)
                    {
                        if (item.IsDeleted == false)
                        {
                            var resul = new BranchQRPaymentResponse();
                            resul.Id = item.Id;
                            resul.BusinessQRPaymentId = item.BusinessQRPaymentId;
                            resul.BranchCode = item.BranchCode;
                            resul.BranchName = item.BranchName;
                            response.Add(resul);
                        }

                    }
                    var aux = JsonConvert.SerializeObject(response);
                    logger.LogError($"BranchQRPpayment: {aux}");
                    return Result<List<BranchQRPaymentResponse>>.SetOk(response);
                }
                
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al obtener BranchQRPayments: {ex.Message}");
                return Result<List<BranchQRPaymentResponse>>.SetError("Error al obtener BranchQRPayments");
            }
        }
        
        
        var combinedList = listBranches.Select(x => new { Id = x.Id, Name = x.Name })
    .Union(listBranchesV1.Select(x => new { Id = x.Id, Name = x.Name }))
    .ToList();
