USE [BD_CREDINET]
GO

/****** Object:  StoredProcedure [cw].[SpEncryptedText]    Script Date: 6/6/2023 11:43:56 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpEncryptedText]
(
@Text NVARCHAR(4000)='mquispeh@bancred.com.bo'
)
AS
DECLARE @EncryptedText NVARCHAR(4000)
BEGIN
---------Encriptacion----------
OPEN SYMMETRIC KEY skBCP_DEV  DECRYPTION BY CERTIFICATE CertBCP_DEV;
IF (@Text IS NOT NULL OR @Text <> '')
BEGIN
SET @EncryptedText=CONVERT(nvarchar(4000), ENCRYPTBYKEY(Key_GUID('skBCP_DEV'), @Text),1)
END	
CLOSE SYMMETRIC KEY skBCP_DEV;
SELECT @EncryptedText
END
;
GO


USE [BD_CREDINET]
GO

/****** Object:  StoredProcedure [cw].[SpDecryptedText]    Script Date: 6/6/2023 11:44:04 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedText]
(
@TextDto NVARCHAR(4000)='0x007A643D3F051E79013F4B566111FFA001000000AE241A24D54B001146AE1620FBEB2BE521D69E98AC20B02C7421749DCB2EB9E0103C37002C7435ED64A72D92F519A7CD5592EEF224FD68147B33335EEDFCA0A208BDBF95342F5936914D5B33DF01C5493883ACA8021E10F4D22E5533D45E0D96E3EC0D66151DB0AA5CA969FB032A58776451429430BE12FA65D01A24EE9DAA73F91A76E9EDB7803289875727264DBC744F60E05FEB236B2F12591A5983A549AE7A2D2734722E705AD30016A3A3FB06706633912CED0958159B9BF7D0E0410705A03548B3D9F56399442A5E5DAD096115902C559D5F19EC28B0F1E42A343F7DFDD49A10B362566E05BD4A80A25E4939A048E3D6116A10F174E694FE98228B655415A3CDD4678795F10FEDB84F8C8E2232C2000223D1FCD9B663E7A38865E5239B5C73BB9CEFE5815B37B9A5D4091F2373'
)
AS
DECLARE @TextEncrypted varbinary(4000)

BEGIN

	---------Desencriptacion----------
		OPEN SYMMETRIC KEY skBCP_DEV  DECRYPTION BY CERTIFICATE CertBCP_DEV;
			SET @TextEncrypted = CONVERT(varbinary(4000), @TextDto,1)
			SET @TextDto= CONVERT(nvarchar(4000), DECRYPTBYKEY(@TextEncrypted))
		CLOSE SYMMETRIC KEY skBCP_DEV;
	END
SELECT @TextDto;
GO

CREATE PROCEDURE [cw].[SpEncryptedText]
(
    @Text NVARCHAR(4000),
    @EncryptedText NVARCHAR(4000) OUTPUT
)
AS
BEGIN
    ---------Encriptacion----------
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@Text IS NOT NULL AND @Text <> '')
    BEGIN
        SET @EncryptedText = CONVERT(nvarchar(4000), ENCRYPTBYKEY(Key_GUID('skBCP_DEV'), @Text), 1)
    END

    CLOSE SYMMETRIC KEY skBCP_DEV;
END


CREATE PROCEDURE [cw].[SpEncryptedText]
(
    @Text NVARCHAR(4000),
    @EncryptedText NVARCHAR(4000) OUTPUT
)
AS
BEGIN
    BEGIN TRANSACTION;
    
    BEGIN TRY
        ---------Encriptacion----------
        OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
        
        IF (@Text IS NOT NULL AND @Text <> '')
        BEGIN
            SET @EncryptedText = CONVERT(nvarchar(4000), ENCRYPTBYKEY(Key_GUID('skBCP_DEV'), @Text), 1)
        END
        
        CLOSE SYMMETRIC KEY skBCP_DEV;
        
        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        -- Manejar el error según sea necesario
    END CATCH
END

USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedText] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedText]
(
    @EncryptedText NVARCHAR(4000),
    @DecryptedText NVARCHAR(4000) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedText IS NOT NULL AND @EncryptedText <> '')
    BEGIN
        SET @DecryptedText = CONVERT(nvarchar(4000), DECRYPTBYKEY(@EncryptedText), 1)
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END


USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedText] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedText]
(
    @EncryptedText VARBINARY(4000),
    @DecryptedText NVARCHAR(4000) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedText IS NOT NULL)
    BEGIN
        SET @DecryptedText = CONVERT(nvarchar(4000), DECRYPTBYKEY(@EncryptedText), 1)
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END


USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedText] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedText]
(
    @EncryptedText VARBINARY(4000),
    @DecryptedText NVARCHAR(4000) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedText IS NOT NULL)
    BEGIN
        SET @DecryptedText = CONVERT(nvarchar(4000), DECRYPTBYKEY(@EncryptedText), 1)
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;

    SELECT @DecryptedText AS DecryptedText;
END


DECLARE @OutputText NVARCHAR(4000);

EXEC [cw].[SpDecryptedText] @EncryptedText = 0x007A643D3F051E79013F4B566111FFA001000000AE241A24D54B001146AE1620FBEB2BE521D69E98AC20B02C7421749DCB2EB9E0103C37002C7435ED64A72D92F519A7CD5592EEF224FD68147B33335EEDFCA0A208BDBF95342F5936914D5B33DF01C5493883ACA8021E10F4D22E5533D45E0D96E3EC0D66151DB0AA5CA969FB032A58776451429430BE12FA65D01A24EE9DAA73F91A76E9EDB7803289875727264DBC744F60E05FEB236B2F12591A5983A549AE7A2D2734722E705AD30016A3A3FB06706633912CED0958159B9BF7D0E0410705A03548B3D9F56399442A5E5DAD096115902C559D5F19EC28B0F1E42A343F7DFDD49A10B362566E05BD4A80A25E4939A048E3D6116A10F174E694FE98228B655415A3CDD4678795F10FEDB84F8C8E2232C2000223D1FCD9B663E7A38865E5239B5C73BB9CEFE5815B37B9A5D4091F2373', @DecryptedText = @OutputText OUTPUT;

SELECT @OutputText AS DecryptedText;

Msg 257, Level 16, State 3, Procedure SpDecryptedTextNew, Line 0 [Batch Start Line 0]
Implicit conversion from data type varchar to varbinary is not allowed. Use the CONVERT function to run this query.


USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedTextNew] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedTextNew]
(
    @EncryptedText VARCHAR(MAX),
    @DecryptedText NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    DECLARE @EncryptedData VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @EncryptedText, 1);
    
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedData IS NOT NULL)
    BEGIN
        SET @DecryptedText = CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(@EncryptedData), 1)
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END
USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedTextNew] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedTextNew]
(
    @EncryptedText NVARCHAR(MAX),
    @DecryptedText NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    DECLARE @EncryptedData VARBINARY(MAX) = 0x + @EncryptedText;
    
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedData IS NOT NULL)
    BEGIN
        SET @DecryptedText = CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(@EncryptedData), 1);
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END
USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedTextNew] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedTextNew]
(
    @EncryptedText NVARCHAR(MAX),
    @DecryptedText NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    DECLARE @EncryptedData VARBINARY(MAX) = 0x + @EncryptedText;
    
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedData IS NOT NULL)
    BEGIN
        SET @DecryptedText = CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(@EncryptedData), 1);
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END
Msg 402, Level 16, State 1, Procedure SpDecryptedTextNew, Line 9 [Batch Start Line 0]
The data types varbinary and nvarchar(max) are incompatible in the add operator.
USE [BD_CREDINET]
GO

/****** Object: StoredProcedure [cw].[SpDecryptedTextNew] Script Date: 6/6/2023 12:00:00 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [cw].[SpDecryptedTextNew]
(
    @EncryptedText NVARCHAR(MAX),
    @DecryptedText NVARCHAR(MAX) OUTPUT
)
AS
BEGIN
    ---------Desencriptación----------
    DECLARE @EncryptedData VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @EncryptedText, 1);
    
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@EncryptedData IS NOT NULL)
    BEGIN
        SET @DecryptedText = CAST(DECRYPTBYKEY(@EncryptedData) AS NVARCHAR(MAX));
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
END



CREATE PROCEDURE [cw].[SpDecryptedText]
(
    @TextDto NVARCHAR(4000) = '0x007A643D3F051E79013F4B566111FFA001000000AE241A24D54B001146AE1620FBEB2BE521D69E98AC20B02C7421749DCB2EB9E0103C37002C7435ED64A72D92F519A7CD5592EEF224FD68147B33335EEDFCA0A208BDBF95342F5936914D5B33DF01C5493883ACA8021E10F4D22E5533D45E0D96E3EC0D66151DB0AA5CA969FB032A58776451429430BE12FA65D01A24EE9DAA73F91A76E9EDB7803289875727264DBC744F60E05FEB236B2F12591A5983A549AE7A2D2734722E705AD30016A3A3FB06706633912CED0958159B9BF7D0E0410705A03548B3D9F56399442A5E5DAD096115902C559D5F19EC28B0F1E42A343F7DFDD49A10B362566E05BD4A80A25E4939A048E3D6116A10F174E694FE98228B655415A3CDD4678795F10FEDB84F8C8E2232C2000223D1FCD9B663E7A38865E5239B5C73BB9CEFE5815B37B9A5D4091F2373'
)
AS
BEGIN
    ---------Desencriptacion----------
    OPEN SYMMETRIC KEY skBCP_DEV DECRYPTION BY CERTIFICATE CertBCP_DEV;
    
    IF (@TextDto IS NOT NULL AND @TextDto <> '')
    BEGIN
        DECLARE @HexText NVARCHAR(MAX) = SUBSTRING(@TextDto, 3, LEN(@TextDto) - 2); -- Eliminar el prefijo '0x'
        DECLARE @BinaryText VARBINARY(MAX) = CONVERT(VARBINARY(MAX), @HexText, 1);
        DECLARE @DecryptedText NVARCHAR(MAX) = CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(@BinaryText));
        SET @TextDto = @DecryptedText;
    END
    
    CLOSE SYMMETRIC KEY skBCP_DEV;
    
    SELECT @TextDto;
END


DECLARE @DecryptedText NVARCHAR(MAX);
EXEC [cw].[SpDecryptedText] @TextDto = '0x007A643D3F051E79013F4B566111FFA001000000AE241A24D54B001146AE1620FBEB2BE521D69E98AC20B02C7421749DCB2EB9E0103C37002C7435ED64A72D92F519A7CD5592EEF224FD68147B33335EEDFCA0A208BDBF95342F5936914D5B33DF01C5493883ACA8021E10F4D22E5533D45E0D96E3EC0D66151DB0AA5CA969FB032A58776451429430BE12FA65D01A24EE9DAA73F91A76E9EDB7803289875727264DBC744F60E05FEB236B2F12591A5983A549AE7A2D2734722E705AD30016A3A3FB06706633912CED0958159B9BF7D0E0410705A03548B3D9F56399442A5E5DAD096115902C559D5F19EC28B0F1E42A343F7DFDD49A10B362566E05BD4A80A25E4939A048E3D6116A10F174E694FE98228B655415A3CDD4678795F10FEDB84F8C8E2232C2000223D1FCD9B663E7A38865E5239B5C73BB9CEFE5815B37B9A5D4091F2373', @DecryptedText = @DecryptedText OUTPUT;
SELECT @DecryptedText;
public Result<List<FavoriteTransactionsResult>> Get() => favorite.Get(new FavoriteTransactionDto { OperationTypeId = BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA | BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP });


public Result<List<FavoriteTransactionsResult>> Get()
{
    // Se crea un objeto FavoriteTransactionDto y se asigna a la propiedad OperationTypeId
    // el resultado de la operación OR entre dos valores de enumeración.
    FavoriteTransactionDto dto = new FavoriteTransactionDto
    {
        OperationTypeId = BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA |
                          BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP
    };

    // Se llama al método favorite.Get() pasando el objeto dto como argumento.
    return favorite.Get(dto);
}
public Result<List<FavoriteTransactionsResult>> Get()
{
    List<FavoriteTransactionsResult> results = new List<FavoriteTransactionsResult>();

    // Se agrega el primer valor de enumeración a la lista de resultados
    results.AddRange(favorite.Get(new FavoriteTransactionDto { OperationTypeId = BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA }));

    // Se agrega el segundo valor de enumeración a la lista de resultados
    results.AddRange(favorite.Get(new FavoriteTransactionDto { OperationTypeId = BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP }));

    return new Result<List<FavoriteTransactionsResult>>(results);
}
