[DOM] Input elements should have autocomplete attributes (suggested: "current-password"): (More info: https://goo.gl/9p2vKq) <input _ngcontent-vbw-c407 type=​"password" name=​"password" required appvalidate=​"password" minlength=​"8" maxlength=​"10" placeholder=​"Ej:​ ********" class=​"form-control ng-untouched ng-pristine ng-invalid" ng-reflect-required ng-reflect-name=​"password" ng-reflect-app-validate=​"password" ng-reflect-maxlength=​"10" ng-reflect-minlength=​"8" ng-reflect-model>​


<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Estado</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let usuario of usuarios">
      <td>{{ usuario.id }}</td>
      <td>{{ usuario.nombre }}</td>
      <td>
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive" (change)="toggleUserState(usuario)">
          <label class="form-check-label" for="estado-{{ usuario.id }}">
            {{ usuario.isActive ? 'Activo' : 'Inactivo' }}
          </label>
        </div>
      </td>
    </tr>
  </tbody>
</table>


import { Component, OnInit } from '@angular/core';
import { UserService } from '../services/user.service';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {

  usuarios: any[];

  constructor(private userService: UserService) { }

  ngOnInit() {
    // Llamada al servicio para obtener la lista de usuarios
    this.userService.getUsers().subscribe(data => {
      this.usuarios = data;
    });
  }

  toggleUserState(usuario: any) {
    // Llamada al servicio para actualizar el estado del usuario
    this.userService.updateUser(usuario).subscribe();
  }
}
<div class="form-check form-switch">
  <input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive">
  <label class="form-check-label" for="estado-{{ usuario.id }}">
    {{ getEstado(usuario.isActive) }}
  </label>
</div>

getEstado(isActive: boolean): string {
  return isActive ? 'Activo' : 'Inactivo';
}


constructor(private userService: UserService, private modalService: NgbModal) { }


toggleUserStateWithConfirmation(usuario: Usuario) {
  const modalRef = this.modalService.open(ConfirmationModalComponent);
  modalRef.componentInstance.message = `¿Está seguro que desea ${usuario.isActive ? 'desactivar' : 'activar'} al usuario ${usuario.nombre}?`;
  modalRef.result.then((result) => {
    if (result === 'confirm') {
      this.toggleUserState(usuario);
    } else {
      // El usuario canceló la operación
      // Aquí puedes realizar alguna acción adicional si lo deseas
    }
  }).catch(() => {
    // El modal se cerró sin confirmar o cancelar la operación
    // Aquí puedes realizar alguna acción adicional si lo deseas
  });
}

<input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive" (change)="toggleUserStateWithConfirmation(usuario)">





select BP.Id, BP.BranchName, QR.Name , BP.IsDeleted from cw.BranchQRPayments BP inner JOIN
cw.QrUserClients QR on BP.QrUserId=QR.QrUserId

select AT.Id, AT.AtmName, QR.Name , AT.IsDeleted from cw.AtmQRPayments AT inner JOIN
cw.QrUserClients QR on AT.QrUserId=QR.QrUserId



select BP.Id, BP.BranchName, QR.Name , BP.IsDeleted from cw.BranchQRPayments BP inner JOIN
cw.QrUserClients QR on BP.QrUserId=QR.QrUserId
inner JOIN cw.BusinessQRPayments BS on BS.Id=BP.BusinessQRPaymentId
where BS.Id=1

select AT.Id, AT.AtmName, QR.Name , AT.IsDeleted from cw.AtmQRPayments AT inner JOIN
cw.QrUserClients QR on AT.QrUserId=QR.QrUserId INNER JOIN
cw.BranchQRPayments BP on BP.Id=AT.BranchQRPaymentId INNER JOIN
cw.BusinessQRPayments BS on BS.Id=BP.BusinessQRPaymentId
WHERE BS.Id=1


-- Stored procedure for the first select statement
CREATE PROCEDURE sp_BranchQRPayments
    @Id INT
AS
BEGIN
    SELECT BP.Id, BP.BranchName, QR.Name, BP.IsDeleted
    FROM cw.BranchQRPayments BP 
    INNER JOIN cw.QrUserClients QR 
    ON BP.QrUserId = QR.QrUserId
    WHERE BP.BusinessQRPaymentId IN (
        SELECT Id 
        FROM cw.BusinessQRPayments 
        WHERE Id = @Id
    )
END

-- Stored procedure for the second select statement
CREATE PROCEDURE sp_AtmQRPayments
    @Id INT
AS
BEGIN
    SELECT AT.Id, AT.AtmName, QR.Name, AT.IsDeleted
    FROM cw.AtmQRPayments AT 
    INNER JOIN cw.QrUserClients QR 
    ON AT.QrUserId = QR.QrUserId 
    INNER JOIN cw.BranchQRPayments BP 
    ON BP.Id = AT.BranchQRPaymentId 
    WHERE BP.BusinessQRPaymentId IN (
        SELECT Id 
        FROM cw.BusinessQRPayments 
        WHERE Id = @Id
    )
END


The data reader is incompatible with the specified 'BCP.CredinetWeb.Functions.QR.Business.BranchQRPayment'. A member of the type, 'BusinessQRPaymentId', does not have a corresponding column in the data reader with the same name.

var listBranches = Context.SqlQuery<BranchQRPayment>("cw.SpBranchQRPayments @Id",
                    new SqlParameter[]{
                        new SqlParameter("@Id", 1)
                    });

                    foreach (var item in listBranches)
                    {
                        if (item.IsDeleted == false)
                        {
                            var resul = new BranchQRPaymentResponse();
                            resul.Id = item.Id;
                            resul.BusinessQRPaymentId = item.BusinessQRPaymentId;
                            resul.BranchCode = item.BranchCode;
                            resul.BranchName = item.BranchName;
                            response.Add(resul);
                        }

                    }
                    var aux = JsonConvert.SerializeObject(response);
                    logger.LogError($"BranchQRPpayment: {aux}");
                    return Result<List<BranchQRPaymentResponse>>.SetOk(response);
                    
                    
                    
                    CREATE PROCEDURE sp_BranchQRPayments
    @Id INT
AS
BEGIN
    SELECT BP.Id, BP.BranchName, QR.Name, BP.IsDeleted, BP.BusinessQRPaymentId
    FROM cw.BranchQRPayments BP 
    INNER JOIN cw.QrUserClients QR 
    ON BP.QrUserId = QR.QrUserId
    WHERE BP.BusinessQRPaymentId IN (
        SELECT Id 
        FROM cw.BusinessQRPayments 
        WHERE Id = @Id
    )
END

The data reader is incompatible with the specified 'BCP.CredinetWeb.Functions.QR.Business.BranchQRPayment'. A member of the type, 'BranchCode', does not have a corresponding column in the data reader with the same name.

<div class="form-group">
  <label for="password">Contraseña</label>
  <div class="input-group">
    <input [type]="inputType" class="form-control" id="password" [(ngModel)]="password">
    <div class="input-group-append">
      <button class="btn btn-outline-secondary" type="button" (click)="toggleShowPassword()">
        <span *ngIf="inputType === 'password'">Mostrar</span>
        <span *ngIf="inputType === 'text'">Ocultar</span>
      </button>
    </div>
  </div>
</div>
import { Component } from '@angular/core';

@Component({
  selector: 'app-tu-componente',
  templateUrl: './tu-componente.component.html',
  styleUrls: ['./tu-componente.component.css']
})
export class TuComponenteComponent {
  password: string;
  inputType: string = 'password';

  toggleShowPassword() {
    this.inputType = (this.inputType === 'password') ? 'text' : 'password';
  }
}

[Parameters] (
    [Id]               INT           IDENTITY (1, 1) NOT NULL,
    [Groups]           NVARCHAR (6)  NOT NULL,
    [Code]             NVARCHAR (6)  NOT NULL,
    [Value]            NVARCHAR (8)  NOT NULL,
    [Description]      NVARCHAR (80) NOT NULL,
    [UserCreation]     NVARCHAR (6)  NOT NULL,
    [UserModification] NVARCHAR (6)  NULL,
    [DateCreation]     DATETIME      NOT NULL,
    [DateModification] DATETIME      NULL,
    [IsDeleted]        BIT           NOT NULL,
public class MyModel
{
    public int Id { get; set; }
    public string Groups { get; set; }
    public string Code { get; set; }
    public string Value { get; set; }
    public string Description { get; set; }
    public string UserCreation { get; set; }
    public string UserModification { get; set; }
    public DateTime DateCreation { get; set; }
    public DateTime? DateModification { get; set; }
    public bool IsDeleted { get; set; }
}

(from payment in contextUsing.massPaymentInterBankTransfers
                              where payment.ProcessBatchId == dto.Id
                              select new VoucherDetailACH
                              {
                                  ProcessBatchId = payment.ProcessBatchId,
                                  DestinationBank = payment.BankDescription,
                                  FormattedAccount = payment.ProcessBatch.Account.FormattedAccount,
                                  DestinationAccount = payment.TargetAccount,
                                  Beneficiary = payment.Beneficiary,
                                  Instructions = payment.InstruccionsAch,
                                  Detail = payment.Details,
                                  State = payment.OperationStatus.Description,
                                  StatusCode = payment.OperationStatus.StatusCode,
                                  Amount = payment.Amount,
                                  Description = payment.Description.Trim(),
                                  Line = payment.Line,
                                  ServiceCode = payment.ServiceCode,
                                  BankCode = payment.BanksAchCode,
                                  TypePayment = payment.ProcessBatch.Account.Type,
                                  Currency = payment.ProcessBatch.Currency == BaseConstants.CURRENCY_BOL ? BaseConstants.CURRENCY_BOL_EXTENDED : BaseConstants.CURRENCY_USD_EXTENDED,
                                  CurrencyCod = payment.ProcessBatch.Currency,
                                  DebitHostOperation = payment.DebitHostOperation,
                                  OperationType = payment.ProcessBatch.OperationType.Name,
                                  OperationStatusId = payment.OperationStatusId,
                                  ProcessMessage = payment.ProcessMessage,
                                  DocumentType = payment.DocumentType,
                                  DocumentNumber = payment.DocumentNumber,
                                  DocumentExtension = payment.DocumentExtension,
                                  IsMultipleDebts = payment.ProcessBatch.IsMultipleDebits,
                                  Message = payment.ProcessMessage
                              })
[cw].[MassPaymentInterBankTransfers] (
    [Id]                      INT             IDENTITY (1, 1) NOT NULL,
    [Description]             NVARCHAR (100)  NULL,
    [Line]                    INT             NOT NULL,
    [TargetAccount]           NVARCHAR (26)   NOT NULL,
    [Amount]                  DECIMAL (19, 2) NOT NULL,
    [Beneficiary]             NVARCHAR (100)  NULL,
    [OperationStatusId]       INT             NOT NULL,
    [Category]                NVARCHAR (3)    NULL,
    [Commission]              DECIMAL (19, 2) NOT NULL,
    [CommissionCurrency]      NVARCHAR (3)    NULL,
    [ServiceCode]             NVARCHAR (100)  NULL,
    [Mail]                    NVARCHAR (4000) NULL,
    [ProcessMessage]          NVARCHAR (256)  NULL,
    [BanksAchCode]            NVARCHAR (15)   NULL,
    [ExternalIdentifier]      BIGINT          NOT NULL,
    [DebitHostOperation]      NVARCHAR (25)   NULL,
    [Details]                 NVARCHAR (40)   NULL,
    [ProcessDate]             DATETIME        NOT NULL,
    [InstruccionsAch]         NVARCHAR (256)  NULL,
    [BranchOfficeId]          INT             NOT NULL,
    [ProcessBatchId]          INT             NOT NULL,
    [BankDescription]         NVARCHAR (100)  NULL,
    [BranchOfficeDescription] NVARCHAR (20)   NULL,
    [DocumentType]            NCHAR (20)      NULL,
    [DocumentNumber]          NVARCHAR (16)   NULL,
    [DocumentExtension]       NCHAR (20)      NULL,
    [ProviderId]              NVARCHAR (15)   NULL,
    [EBSTransactionNumber]    NVARCHAR (15)   NULL,
