[DOM] Input elements should have autocomplete attributes (suggested: "current-password"): (More info: https://goo.gl/9p2vKq) <input _ngcontent-vbw-c407 type=​"password" name=​"password" required appvalidate=​"password" minlength=​"8" maxlength=​"10" placeholder=​"Ej:​ ********" class=​"form-control ng-untouched ng-pristine ng-invalid" ng-reflect-required ng-reflect-name=​"password" ng-reflect-app-validate=​"password" ng-reflect-maxlength=​"10" ng-reflect-minlength=​"8" ng-reflect-model>​


<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Nombre</th>
      <th>Estado</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let usuario of usuarios">
      <td>{{ usuario.id }}</td>
      <td>{{ usuario.nombre }}</td>
      <td>
        <div class="form-check form-switch">
          <input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive" (change)="toggleUserState(usuario)">
          <label class="form-check-label" for="estado-{{ usuario.id }}">
            {{ usuario.isActive ? 'Activo' : 'Inactivo' }}
          </label>
        </div>
      </td>
    </tr>
  </tbody>
</table>


import { Component, OnInit } from '@angular/core';
import { UserService } from '../services/user.service';

@Component({
  selector: 'app-user-list',
  templateUrl: './user-list.component.html',
  styleUrls: ['./user-list.component.css']
})
export class UserListComponent implements OnInit {

  usuarios: any[];

  constructor(private userService: UserService) { }

  ngOnInit() {
    // Llamada al servicio para obtener la lista de usuarios
    this.userService.getUsers().subscribe(data => {
      this.usuarios = data;
    });
  }

  toggleUserState(usuario: any) {
    // Llamada al servicio para actualizar el estado del usuario
    this.userService.updateUser(usuario).subscribe();
  }
}
<div class="form-check form-switch">
  <input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive">
  <label class="form-check-label" for="estado-{{ usuario.id }}">
    {{ getEstado(usuario.isActive) }}
  </label>
</div>

getEstado(isActive: boolean): string {
  return isActive ? 'Activo' : 'Inactivo';
}


constructor(private userService: UserService, private modalService: NgbModal) { }


toggleUserStateWithConfirmation(usuario: Usuario) {
  const modalRef = this.modalService.open(ConfirmationModalComponent);
  modalRef.componentInstance.message = `¿Está seguro que desea ${usuario.isActive ? 'desactivar' : 'activar'} al usuario ${usuario.nombre}?`;
  modalRef.result.then((result) => {
    if (result === 'confirm') {
      this.toggleUserState(usuario);
    } else {
      // El usuario canceló la operación
      // Aquí puedes realizar alguna acción adicional si lo deseas
    }
  }).catch(() => {
    // El modal se cerró sin confirmar o cancelar la operación
    // Aquí puedes realizar alguna acción adicional si lo deseas
  });
}

<input class="form-check-input" type="checkbox" id="estado-{{ usuario.id }}" [(ngModel)]="usuario.isActive" (change)="toggleUserStateWithConfirmation(usuario)">


