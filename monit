protected override Result<GetDBFDMonitorResponse> GetDBFDMonitorResult(ProcessBatch processBatch, PaymentAchDto dto)
        {
            try { 
                logger.LogError($"-----Iniciando el Monitoreo: {DateTime.Now.ToString("yyyyMMddHHmmss")}------------");
                GetDBFDMonitorRequest request = new GetDBFDMonitorRequest();
                GetDBFDMonitorResponse response = new GetDBFDMonitorResponse();
                GetAccountClientRequest requestRepex = new GetAccountClientRequest();
                SetExchangeRates();
                var userName = UserInfo.Identity.GetUserName();
                requestRepex.AccountNumber = dto.SourceAccount;
                requestRepex.DocumentNumber = "--";
                requestRepex.DocumentExtension = "--";
                logger.LogError($"Request consulta repex: {dto.SourceAccount}");
                var resRepex = repExtManager.GetAccountClient(requestRepex);

                var json = JsonConvert.SerializeObject(resRepex);
                logger.LogError($"Response consulta repex: {json}");
                var resUserName = Context.Users.Where(x => x.Id == this.UserId).FirstOrDefault();
                var resAccounts = Context.Accounts.Where(x => x.Number.Trim() == dto.SourceAccount.Trim()).FirstOrDefault();
                var resJurNat = Context.Companies.Where(x => x.Id == processBatch.CompanyId).FirstOrDefault();
                var reult = Result<GetDBFDMonitorResponse>.SetOk(response);
                var typeOpe = "";
                decimal typeMon = 0;

                if (dto.OperationTypeId == 24 || processBatch.TransferType.Type == 2)
                {
                    typeOpe = "203";
                }
                if (resAccounts.Currency.Trim() != processBatch.Currency.Trim())
                {
                    if (resAccounts.Currency.Trim()=="USD" && processBatch.Currency.Trim()=="BOL")
                    {
                        typeMon = lastExchangeRates.Sale;
                    }
                    else if (resAccounts.Currency.Trim() == "BOL" && processBatch.Currency.Trim() == "USD")
                    {
                        typeMon = lastExchangeRates.Purchase;
                    }
                }else
                {
                    typeMon=0;
                }
                if (string.IsNullOrEmpty(dto.Ip) || dto.Ip.Length >= 16 || dto.Ip == "NOT_IP")
                {
                    request.IpSolicitud = "172.31.4.227";
                    logger.LogError($"Deificultad al encontrar la direccion Ip: ----{dto?.Ip}---- se aigna la Ip: 172.31.4.227 ");
                }
                else
                {
                    request.IpSolicitud = dto?.Ip;
                    logger.LogError($"Encontro la Ip de forma Correcta: ---{dto?.Ip}----");
                }
                
                 var batchLote = 20;
                for(var i=0; dto.Spreadsheet.Count > 0; i = 20)
                {

                }
                foreach (var j in dto.Spreadsheet)
                {
                
                    request.FechaHoraTransaccion = DateTime.Now.ToString("yyyyMMddHHmmss");
                    //request.IpSolicitud = (string.IsNullOrEmpty(dto.Ip) || dto.Ip.Length >= 16) ? "172.31.4.227" : dto.Ip;
                    request.UsuarioAutorizador = this.UserId.ToString();
                    request.FechaAperturaCuenta = resAccounts.DateCreation.ToString("yyyyMMdd");
                    request.MonedaTransaccion = processBatch.Currency.Trim();
                    request.ImporteTransaccion = j.Amount;
                    request.TipoCambio = typeMon;
                    request.NombreClienteOrigen = resRepex.Body.Client;
                    request.CuentaDestino = j.TargetAccount; 
                    request.NombreClienteDestino = j.Beneficiary;
                    request.EmailCuentaDestino = j.Mail.Length > 40 ? j.Mail.Trim().Substring(0, Math.Min(40, j.Mail.Trim().Length)) : j.Mail;
                    request.BancoDestino = j.BanksAchCode;
                    request.NumeroTransaccionTrace = GetTrace();
                    request.SessionId = userName.Trim().Substring(10, Math.Min(6, userName.Trim().Length)) + DateTime.Now.ToString("yyyyMMddHHmmss");
                    var aux = JsonConvert.SerializeObject(request);
                    response = this.manager.GetDBFDMonitor(request);
                    var aux1 = JsonConvert.SerializeObject(response?.AnswerCode);
                    var aux2 = JsonConvert.SerializeObject(response?.AnswerMessage);
                    var aux3 = JsonConvert.SerializeObject(response?.MonitorResponse?.Message);

                    reult = Result<GetDBFDMonitorResponse>.SetOk(response);

                    if (reult.Body.AnswerCode != "00")
                    {
                        logger.LogError($"Request: ----{aux}-----");
                        var operationStatusError = 8;
                        processBatch.OperationStatusId = operationStatusError;
                        logger.LogError($"Response: ----{aux1}--__--{aux2}----");
                        logger.LogError($"ResponseDetalle: ----{aux3}-----");
                        logger.LogError($"------Fin de monitoreo con observaciones: {DateTime.Now.ToString("yyyyMMddHHmmss")}-----");
                        return reult;
                    }
                }
                logger.LogError($"------Fin de monitoreo sin observaciones: {DateTime.Now.ToString("yyyyMMddHHmmss")}-----");
                return reult;
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al obtener monitoreo: {ex.Message}");
                return Result<GetDBFDMonitorResponse>.SetError("Error al obtener monitoreo");

            }
        }

 protected override Result<GetDBFDMonitorResponse> GetDBFDMonitorResult(ProcessBatch processBatch, PaymentAchDto dto)
        {
            try { 
                logger.LogError($"-----Iniciando el Monitoreo: {DateTime.Now.ToString("yyyyMMddHHmmss")}------------");
                GetDBFDMonitorRequest request = new GetDBFDMonitorRequest();
                GetDBFDMonitorResponse response = new GetDBFDMonitorResponse();
                GetAccountClientRequest requestRepex = new GetAccountClientRequest();
                
                 var reult = Result<GetDBFDMonitorResponse>.SetOk(response);
                 request.DatosReto = "";
                request.PreguntasReto = "S";
                request.RespuestasCorrectas = "S";
                request.OrigenTransaccion = "WEB-JS";
                request.CodigoRespuestaHost = "00";
                request.LocalInternacional = "L";
                 foreach (var j in dto.Spreadsheet)
                {
                
                    request.FechaHoraTransaccion = DateTime.Now.ToString("yyyyMMddHHmmss");
                    //request.IpSolicitud = (string.IsNullOrEmpty(dto.Ip) || dto.Ip.Length >= 16) ? "172.31.4.227" : dto.Ip;
                    request.UsuarioAutorizador = this.UserId.ToString();
                    request.FechaAperturaCuenta = resAccounts.DateCreation.ToString("yyyyMMdd");
                    request.MonedaTransaccion = processBatch.Currency.Trim();
                    request.ImporteTransaccion = j.Amount;
                    request.TipoCambio = typeMon;
                    request.NombreClienteOrigen = resRepex.Body.Client;
                    request.CuentaDestino = j.TargetAccount; 
                    request.NombreClienteDestino = j.Beneficiary;
                    request.EmailCuentaDestino = j.Mail.Length > 40 ? j.Mail.Trim().Substring(0, Math.Min(40, j.Mail.Trim().Length)) : j.Mail;
                    request.BancoDestino = j.BanksAchCode;
                    request.NumeroTransaccionTrace = GetTrace();
                    request.SessionId = userName.Trim().Substring(10, Math.Min(6, userName.Trim().Length)) + DateTime.Now.ToString("yyyyMMddHHmmss");
                    var aux = JsonConvert.SerializeObject(request);
    //                logger.LogError($"Request: {aux}");
                    response = this.manager.GetDBFDMonitor(request);
                    var aux1 = JsonConvert.SerializeObject(response?.AnswerCode);
                    var aux2 = JsonConvert.SerializeObject(response?.AnswerMessage);
                    var aux3 = JsonConvert.SerializeObject(response?.MonitorResponse?.Message);

                    reult = Result<GetDBFDMonitorResponse>.SetOk(response);

                    if (reult.Body.AnswerCode != "00")
                    {
                        logger.LogError($"Request: ----{aux}-----");
                        var operationStatusError = 8;
                        processBatch.OperationStatusId = operationStatusError;
                        logger.LogError($"Response: ----{aux1}--__--{aux2}----");
                        logger.LogError($"ResponseDetalle: ----{aux3}-----");
                        logger.LogError($"------Fin de monitoreo con observaciones: {DateTime.Now.ToString("yyyyMMddHHmmss")}-----");
                        return reult;
                    }
                }
                logger.LogError($"------Fin de monitoreo sin observaciones: {DateTime.Now.ToString("yyyyMMddHHmmss")}-----");
                return reult;
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al obtener monitoreo: {ex.Message}");
                return Result<GetDBFDMonitorResponse>.SetError("Error al obtener monitoreo");

            }
        }



protected override Result<GetDBFDMonitorResponse> GetDBFDMonitorResult(ProcessBatch processBatch, PaymentAchDto dto)
{
    try
    {
        // ...

        var batchLote = 20;
        var tasks = new List<Task>();

        for (var i = 0; i < dto.Spreadsheet.Count; i += batchLote)
        {
            var batch = dto.Spreadsheet.Skip(i).Take(batchLote).ToList();
            var task = EnviarRegistrosAsync(batch);
            tasks.Add(task);
        }

        await Task.WhenAll(tasks);

        // ...

        return reult;
    }
    catch (Exception ex)
    {
        // ...
        return Result<GetDBFDMonitorResponse>.SetError("Error al obtener monitoreo");
    }
}
protected override Result<GetDBFDMonitorResponse> GetDBFDMonitorResult(ProcessBatch processBatch, PaymentAchDto dto)
{
    try
    {
        // ...

        var batchLote = 20;
        var partitions = Partitioner.Create(dto.Spreadsheet).GetPartitions(batchLote);

        Parallel.ForEach(partitions, (partition) =>
        {
            var batch = new List<Registro>();
            while (partition.MoveNext())
            {
                var registro = partition.Current;
                batch.Add(registro);
            }

            EnviarRegistros(batch);
        });

        // ...

        return Result<GetDBFDMonitorResponse>.SetOk(response);
    }
    catch (Exception ex)
    {
        // ...
        return Result<GetDBFDMonitorResponse>.SetError("Error al obtener monitoreo");
    }
}

private void EnviarRegistros(List<Registro> registros)
{
    foreach (var registro in registros)
    {
        GetDBFDMonitorRequest request = new GetDBFDMonitorRequest();
        // Configurar el request con los datos del registro

        var response = manager.GetDBFDMonitor(request);
        // Procesar la respuesta de la API si es necesario
        // ...
    }
}





protected override Result<GetDBFDMonitorResponse> GetDBFDMonitorResult(ProcessBatch processBatch, PaymentAchDto dto)
{
    try
    {
        // ...

        var batchLote = 20;
        var partitions = Partitioner.Create(dto.Spreadsheet).GetPartitions(batchLote);

        Parallel.ForEach(partitions, (partition) =>
        {
            var batch = new List<Registro>();
            while (partition.MoveNext())
            {
                var registro = partition.Current;
                batch.Add(registro);
            }

            EnviarRegistros(batch);
        });

        // ...

        return Result<GetDBFDMonitorResponse>.SetOk(response);
    }
    catch (Exception ex)
    {
        // ...
        return Result<GetDBFDMonitorResponse>.SetError("Error al obtener monitoreo");
    }
}

private void EnviarRegistros(List<Registro> registros)
{
    foreach (var registro in registros)
    {
        GetDBFDMonitorRequest request = new GetDBFDMonitorRequest();
        // Configurar el request con los datos del registro

        var response = manager.GetDBFDMonitor(request);
        // Procesar la respuesta de la API si es necesario
        // ...
    }
}
private async Task EnviarRegistrosAsync(List<Registro> registros)
{
    foreach (var registro in registros)
    {
        GetDBFDMonitorRequest request = new GetDBFDMonitorRequest();
        // Configurar el request con los datos del registro

        var response = await manager.GetDBFDMonitorAsync(request);
        // Procesar la respuesta de la API si es necesario
        // ...
    }
}





