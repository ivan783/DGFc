ELSE IF @Option='UPDATE'
    BEGIN
        UPDATE [cw].[BusinessQRPayments]
        SET
            CompanyId = @CompanyId,
            BusinessCode = @BusinessCode,
            Abreviation = @Abreviation,
            UserModification = @UserModification,
            DateModification = GETDATE(),
            IsDeleted = @IsDeleted
        WHERE
            Id = @Id;
    END
Microsoft.Reporting.WebForms.LocalProcessingException: 'An error occurred during local report processing.'

NullReferenceException: Object reference not set to an instance of an object.
public byte[] GetReport(ProcessBatchIdDto dto)
        {
            var detail = GetDetail(Get(dto.ProcessBatchId));
            var report = new LocalReport
            {
                ReportPath = string.Concat(Context.Parameters.Where(x => x.Groups == BaseConstants.REPORT_GROUP && x.Code == BaseConstants.REPORT_CODE).First().Description,
                    configuration.GetSection("Reports")["ManualPayments"])
            };
            report.DataSources.Add(new ReportDataSource("ManualPaymentResult", new List<BatchDetailResult> { detail.BatchDetail }));
            report.DataSources.Add(new ReportDataSource("ManualPaymentDetail",  detail.PaymentDetail ));
            string devicInfo =
                "  <DeviceInfo>" +
                "  <OutputFormat>PDF</OutputFormat>" +
                "  <PageWidth>11in</PageWidth>" +
                "  <PageHeight>8in</PageHeight>" +
                "  <MarginTop>0.5in</MarginTop>" +
                "  <MarginLeft>0.5in</MarginLeft>" +
                "  <MarginRight>0.5in</MarginRight>" +
                "  <MarginBottom>0.5in</MarginBottom>" +
                "  </DeviceInfo>";
            return report.Render("pdf", devicInfo);
        }
public byte[] GetReport(ProcessBatchIdDto dto)
{
    var detail = GetDetail(Get(dto.ProcessBatchId));

    var reportPath = Context.Parameters
        .FirstOrDefault(x => x.Groups == BaseConstants.REPORT_GROUP && x.Code == BaseConstants.REPORT_CODE)?
        .Description;

    if (reportPath == null)
    {
        throw new Exception("Report path not found.");
    }

    var report = new LocalReport
    {
        ReportPath = string.Concat(reportPath, configuration.GetSection("Reports")["ManualPayments"])
    };

    report.DataSources.Add(new ReportDataSource("ManualPaymentResult", new List<BatchDetailResult> { detail.BatchDetail }));
    report.DataSources.Add(new ReportDataSource("ManualPaymentDetail", detail.PaymentDetail));

    string deviceInfo =
        "  <DeviceInfo>" +
        "  <OutputFormat>PDF</OutputFormat>" +
        "  <PageWidth>11in</PageWidth>" +
        "  <PageHeight>8in</PageHeight>" +
        "  <MarginTop>0.5in</MarginTop>" +
        "  <MarginLeft>0.5in</MarginLeft>" +
        "  <MarginRight>0.5in</MarginRight>" +
        "  <MarginBottom>0.5in</MarginBottom>" +
        "  </DeviceInfo>";

    return report.Render("pdf", deviceInfo);
}
public byte[] GetReport(ProcessBatchIdDto dto)
{
    var detail = GetDetail(Get(dto.ProcessBatchId));

    var reportPath = Context.Parameters
        .FirstOrDefault(x => x.Groups == BaseConstants.REPORT_GROUP && x.Code == BaseConstants.REPORT_CODE)?
        .Description;

    if (reportPath == null)
    {
        throw new Exception("Report path not found.");
    }

    var report = new LocalReport
    {
        ReportPath = string.Concat(reportPath, configuration.GetSection("Reports")["ManualPayments"])
    };

    report.DataSources.Add(new ReportDataSource("ManualPaymentResult", new List<BatchDetailResult> { detail.BatchDetail }));
    report.DataSources.Add(new ReportDataSource("ManualPaymentDetail", detail.PaymentDetail));

    string deviceInfo =
        "  <DeviceInfo>" +
        "  <OutputFormat>PDF</OutputFormat>" +
        "  <PageWidth>11in</PageWidth>" +
        "  <PageHeight>8in</PageHeight>" +
        "  <MarginTop>0.5in</MarginTop>" +
        "  <MarginLeft>0.5in</MarginLeft>" +
        "  <MarginRight>0.5in</MarginRight>" +
        "  <MarginBottom>0.5in</MarginBottom>" +
        "  </DeviceInfo>";

    return report.Render("pdf", deviceInfo);
}
public byte[] GetReport(ProcessBatchIdDto dto)
{
    var detail = GetDetail(Get(dto.ProcessBatchId));

    var reportPath = Context.Parameters
        .FirstOrDefault(x => x.Groups == BaseConstants.REPORT_GROUP && x.Code == BaseConstants.REPORT_CODE)?
        .Description;

    if (reportPath == null)
    {
        throw new Exception("Report path not found.");
    }

    var report = new LocalReport
    {
        ReportPath = string.Concat(reportPath, configuration.GetSection("Reports")["ManualPayments"])
    };

    report.DataSources.Add(new ReportDataSource("ManualPaymentResult", new List<BatchDetailResult> { detail.BatchDetail }));
    report.DataSources.Add(new ReportDataSource("ManualPaymentDetail", detail.PaymentDetail));

    string deviceInfo =
        "  <DeviceInfo>" +
        "  <OutputFormat>PDF</OutputFormat>" +
        "  <PageWidth>11in</PageWidth>" +
        "  <PageHeight>8in</PageHeight>" +
        "  <MarginTop>0.5in</MarginTop>" +
        "  <MarginLeft>0.5in</MarginLeft>" +
        "  <MarginRight>0.5in</MarginRight>" +
        "  <MarginBottom>0.5in</MarginBottom>" +
        "  </DeviceInfo>";

    return report.Render("pdf", deviceInfo);
}
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
        {
           var k = mapper.Map<BatchDetailResult>(batch);
            var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };
            switch (batch.OperationTypeId)
            {
                case BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA:
                    result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements);
                    break;
                case BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP:
                    result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements);
                    break;
                case BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE:
                    result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks);
                    break;
                case BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA:
                    result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks);
                    break;
            }
            return result;
        }
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };

    result.PaymentDetail = batch.OperationTypeId switch
    {
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA or
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements),
        BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks),
        BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA =>
            mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks),
        _ => null
    };

    return result;
}
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };

    result.PaymentDetail = batch.OperationTypeId switch
    {
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA or
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements),
        BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks),
        BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA =>
            mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks),
        _ => new List<PaymentDetail>()
    };

    return result;
}
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };

    result.PaymentDetail = batch.OperationTypeId switch
    {
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA or
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements),
        BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks),
        BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA =>
            mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks),
        _ => new List<PaymentDetail>()
    };

    return result;
}
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };

    result.PaymentDetail = batch.OperationTypeId switch
    {
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA or
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements),
        BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks),
        BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA =>
            mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks),
        _ => new List<PaymentDetail>()
    };

    return result;
}
private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult { BatchDetail = mapper.Map<BatchDetailResult>(batch) };

    result.PaymentDetail = batch.OperationTypeId switch
    {
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA or
        BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements),
        BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE =>
            mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks),
        BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA =>
            mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks),
        _ => new List<PaymentDetail>()
    };

    return result;
}


private ManualPaymentDetailResult GetDetail(ProcessBatch batch)
{
    var result = new ManualPaymentDetailResult
    {
        BatchDetail = mapper.Map<BatchDetailResult>(batch)
    };

    switch (batch.OperationTypeId)
    {
        case BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA:
        case BaseConstants.OPERATION_PAGO_PROVEEDORES_CHEQUE_GERENCIA_LIP:
            result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.ProvidersCheckManagements);
            break;
        case BaseConstants.OPERATION_PAGO_PROVEEDORES_OTROS_BANCOS_CHEQUE:
            result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.ProvidersDepositOtherBankChecks);
            break;
        case BaseConstants.OPERATION_PAGO_IMPUESTO_GERENCIA:
            result.PaymentDetail = mapper.Map<List<PaymentDetail>>(batch.PaymentTaxChecks);
            break;
        default:
            result.PaymentDetail = new List<PaymentDetail>();
            break;
    }

    return result;
}
public async Task<Response> ProcesarRegistrosAsync(List<Registro> registros)
{
    List<Task> tareas = new List<Task>();

    foreach (var registro in registros)
    {
        Task tarea = EnviarRegistroAsync(registro);
        tareas.Add(tarea);
    }

    await Task.WhenAll(tareas);

    // Aquí puedes realizar cualquier procesamiento adicional o retorno de resultados

    return new Response { Success = true, Message = "Registros procesados correctamente" };
}

private async Task EnviarRegistroAsync(Registro registro)
{
    HttpResponseMessage response = await httpClient.PostAsync(url, contenido);
    // Procesar la respuesta de la API si es necesario
    // ...
}
